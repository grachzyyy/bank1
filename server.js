const express = require('express');
const fs = require('fs');
const path = require('path');
const bodyParser = require('body-parser');
const moment = require('moment');

const app = express();
app.use(bodyParser.json());
app.use(express.static('public'));

const PORT = 3000;

const MAX_ATTEMPTS = 5;
const BLOCK_TIME = 4 * 60 * 60 * 1000;
const LOG_FILE = 'logs.json';

const failedAttempts = {};

function logAttempt({ ip, username, success, message }) {
  const logs = fs.existsSync(LOG_FILE)
    ? JSON.parse(fs.readFileSync(LOG_FILE))
    : [];

  logs.push({
    ip,
    time: Date.now(),
    username,
    success,
    message
  });

  fs.writeFileSync(LOG_FILE, JSON.stringify(logs, null, 2));
}

app.post('/login', (req, res) => {
  const ip = req.ip;
  const now = Date.now();
  const { username, password } = req.body;

  if (
    failedAttempts[ip] &&
    failedAttempts[ip].count >= MAX_ATTEMPTS &&
    now - failedAttempts[ip].lastAttempt < BLOCK_TIME
  ) {
    const msg = '–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 4 —á–∞—Å–∞.';
    logAttempt({ ip, username, success: false, message: msg });
    return res.status(403).send(msg);
  }

  // Admin –≤—Ö–æ–¥
  if (username === 'admin' && password === 'admin123') {
    logAttempt({ ip, username, success: true, message: '–í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    return res.send('–í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–µ–Ω!');
  }

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—Ö–æ–¥
  if (username === 'bankuser' && password === '123456') {
    failedAttempts[ip] = { count: 0, lastAttempt: now };
    logAttempt({ ip, username, success: true, message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥' });
    return res.send(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!`);
  } else {
    if (!failedAttempts[ip]) {
      failedAttempts[ip] = { count: 1, lastAttempt: now };
    } else {
      failedAttempts[ip].count++;
      failedAttempts[ip].lastAttempt = now;
    }

    const attemptsLeft = MAX_ATTEMPTS - failedAttempts[ip].count;
    const msg = attemptsLeft <= 0
      ? '–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 4 —á–∞—Å–∞ –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞.'
      : `–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${attemptsLeft}`;

    logAttempt({ ip, username, success: false, message: msg });

    return res.status(401).send(msg);
  }
});

// üîê Admin API
app.get('/admin/logs', (req, res) => {
  const logs = fs.existsSync(LOG_FILE)
    ? JSON.parse(fs.readFileSync(LOG_FILE))
    : [];
  res.json(logs);
});

app.post('/admin/clear-blocks', (req, res) => {
  for (let ip in failedAttempts) {
    failedAttempts[ip] = { count: 0, lastAttempt: 0 };
  }
  res.send('–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!');
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
});
